#include <thread>
#include <filesystem>
#include "ByteEntropy.h"
using namespace std;

void calEntropy(int start, int end, vector<string> paths) {
	ByteEntropy calculator;

	for (int i = start; i < end; i++) {
		cout << paths[i] << "... " << i - start << "/" << end - start << endl;
		calculator.setpath(paths[i]);
		calculator.save();
	}

}

int main() {
	// get paths
	vector<string> paths;
	for (auto& p : experimental::filesystem::directory_iterator("D:\\VirusData\\")) {
		string path = p.path().string();
		if (path.rfind(".bytes") != -1)
			paths.push_back(path);
	}
	const int numPath = paths.size();

	// create thread
	const int numCPU = thread::hardware_concurrency();
	thread* t = new thread[numCPU];
	for (int i = 0; i < numCPU; i++) {
		int start = i * (numPath / numCPU);
		int end;
		if (i == numCPU - 1) end = numPath;
		else end =(i+1)* (numPath / numCPU);

		t[i] = thread(calEntropy, start, end, paths);
	}

	for (int i = 0; i < numCPU; i++) {
		t[i].join();
	}
	delete[] t;

	return 0;
}