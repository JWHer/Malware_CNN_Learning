#Copyright 2019.  Jeongwon Her.  All rights reserved.

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import hashlib
import os

from Loader import Loader
from Model import Model

DATA_PATH="./data"
LABL_PATH="trainLabels.csv"
EPOCH=100
LOAD=False
SAVE=False
TEST=True

def main():
    # Data
    print("Getting dir infos...")
    files=[f for f in os.listdir(DATA_PATH) if f.rfind('.csv')!=-1]

    print("Loading Labels...")
    y_csv=np.loadtxt(LABL_PATH,
                     dtype={'names': ('Id', 'Class'),
                            'formats': ('|S20', np.int)},
                     delimiter=',', skiprows=1)
    y_tmp=[d[1] for d in y_csv if d[0].decode('utf-8') +'.csv' in files]
    y_data=[]
    for t in y_tmp:
        tmp=[0]*Model.SIZE_Y
        tmp[t]=1
        y_data.append(tmp)
    y_data=np.array(y_data)

    print("Loading Datas...")
    loader=Loader()
    x_data=np.empty([len(files),loader.SIZE**2])
    for i in range(len(files)):
        x_data[i]=loader.load(os.path.join(DATA_PATH, files[i]))

    #make test
    x_test=x_data[-int(0.3*len(x_data)):]
    x_data=x_data[:int(0.7*len(x_data))]
    y_test=y_data[-int(0.3*len(y_data)):]
    y_data=y_data[:int(0.7*len(y_data))]

    # Tensorflow
    m1=Model("m1")
    m1.set(16,10,0.01)
    if LOAD or TEST: m1.load("./model")

    if not TEST:
        print("Learning Start...")
        for epoch in range(EPOCH):
            #cost, optimizer
            cost, _, _ = m1.train(x_data, y_data)
            if epoch%100==0: print("In", str(epoch)+"... cost:", cost)
        print("Learning Finished")

    print("Accuracy :",m1.accuracy(x_test, y_test))
    
    if SAVE: m1.save("./model/ckpt")

if __name__=='__main__':
    main()

    #with open('Android.PegasusB.sha', 'r') as file:
    #    line=file.readlines()
    #    for l in line:
    #        print(l)

    #with open('C:\\Users\\hacel\\source\\repos\\VirusLearn\\ByteHist\\Virus\\installBC201401.exe', 'rb') as file:    
    #    byte=file.read()
    #    sha=hashlib.sha256()
    #    sha.update(byte)
    #    line=sha.hexdigest()
    #    print(line)

    #data=np.random.uniform(0,1,[128,128,1])
    #print(data)

    #data[64,64]=[255,255,255]
    #img=Image.fromarray(data, 'RGB')
    #plt.imshow(data.reshape(128,128), cmap='Greys')
    #img.save('my.png')
    #img=mpimg.imread('stinkbug.png')
    #img.show()