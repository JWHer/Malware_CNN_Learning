#Copyright 2019.  Jeongwon Her.  All rights reserved.
import numpy as np
import tensorflow as tf

class Model:
    SIZE_X=16
    SIZE_Y=10
    LEARNING_RATE=0.01

    def __init__(self, name, verbose=False):
        try:
            import numpy as np
        except ImportError:
            print("This class based on numpy")
            quit()
        try:
            import tensorflow as tf
        except ImportError:
            print("This class based on tensorflow")
            quit()

        if not verbose: tf.logging.set_verbosity(tf.logging.ERROR)
        self.name=name

    def set(self, imgSize, labelSize, lRate):
        self.SIZE_X=imgSize
        self.SIZE_Y=labelSize
        self.LEARNING_RATE=lRate

        self.sess=tf.Session()
        self._build_net()

        self.saver=tf.train.Saver(tf.global_variables())

        # must initialize after optimizer set
        self.sess.run(tf.global_variables_initializer())

    def _build_net(self):
        with tf.variable_scope(self.name):
            # dropout
            self.keep_prob = tf.placeholder(tf.float32)

            # input holders
            self.X = tf.placeholder(tf.float32, [None, self.SIZE_X**2])
            self.Y = tf.placeholder(tf.int8, [None, self.SIZE_Y])
            # img                    [Nums, sizeX, sizeY, Color]   
            x_img=tf.reshape(self.X, [-1, self.SIZE_X, self.SIZE_X, 1])

            #                                 [FilterX, FilterY, Color, Nums]
            W1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev=0.01))
            # Calculate Filtered Image         [,movX, movY,]
            L1=tf.nn.conv2d(x_img, W1, strides=[1,1,1,1], padding='SAME')
            L1 = tf.nn.relu(L1)
            # Subsampling
            L1 = tf.nn.max_pool(L1, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
            L1 = tf.nn.dropout(L1, keep_prob=self.keep_prob)

            # 
            W2=tf.Variable(tf.random_normal([3,3,32,64], stddev=0.01))
            L2=tf.nn.conv2d(L1, W2, strides=[1,1,1,1], padding='SAME')
            L2=tf.nn.relu(L2)
            L2=tf.nn.max_pool(L2, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
            L2=tf.nn.dropout(L2, keep_prob=self.keep_prob)
            L2=tf.reshape(L2, [-1, 4*4*64])

            # Fully-Connected Layer
            W3 = tf.get_variable("W2", shape=[4*4*64, self.SIZE_Y],
                                 initializer=tf.contrib.layers.xavier_initializer())
            b=tf.Variable(tf.random_normal([self.SIZE_Y]))
            #hypothesis
            self.logits=tf.matmul(L2, W3)+b

        self.cost=tf.reduce_mean(
            tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.Y))
        self.optimizer = tf.train.AdamOptimizer(
            learning_rate=self.LEARNING_RATE).minimize(self.cost)

    def train(self, x_data, y_data, keep_prop=0.7):
        return self.sess.run(
            [self.cost, self.logits, self.optimizer],
            feed_dict={self.X:x_data, self.Y:y_data, self.keep_prob: keep_prop})

    def predict(self, x_test, keep_prop=1.0):
        return self.sess.run(
            self.logits,
            feed_dict={self.X:x_test, self.keep_prob:keep_prop})

    def accuracy(self, x_test, y_test, keep_prop=1.0):
        correct=tf.equal(tf.argmax(self.logits,1), tf.argmax(self.Y, 1))
        self.accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))
        return self.sess.run(
            self.accuracy,
            feed_dict={self.X:x_test, self.Y:y_test, self.keep_prob: keep_prop})

    def save(self, savePath):
        try:
            self.saver.save(self.sess, savePath)
        except:
            print("Save path error")

    def load(self, loadPath):
        ckpt=tf.train.get_checkpoint_state(loadPath)
        if tf.train.checkpoint_exists(ckpt.model_checkpoint_path):
            self.saver.restore(self.sess, ckpt.model_checkpoint_path)
            return
        else:
            print("Load path error")

        # must initialize after optimizer set
        self.sess.run(tf.global_variables_initializer())
